package xyz.schnabl.remote

import xyz.schnabl.remote.account.AccountDto
import xyz.schnabl.remote.feed.TransactionFeedDto
import xyz.schnabl.remote.savings.SavingsGoalDto
import xyz.schnabl.remote.savings.SavingsGoalInfoDto
import xyz.schnabl.remote.savings.TransferSavingsGoalDto
import java.time.LocalDateTime
import java.util.UUID

/**
 * Client to interact with the Starling API. The following resources and verbs are supported
 * - GET /accounts
 * - GET /account/:accountUid/category/:categoryUid (transactionFeed)
 * - GET /account/:accountUid/savings-goals/:savings-goalsUid
 * - PUT /account/:accountUid/savings-goals
 * - PUT /account
 */
interface StarlingClient {

    /**
     * Returns the list of accounts for the configured users
     * @return List of AccontDtos
     */
    fun getAccountsForUser() : List<AccountDto>

    /**
     * Returns all the transactions for an account for a given category since any given time
     * @param accountUid : UUID of the account
     * @param categoryUid : UUID of the account
     * @param changesSince : LocalDateTime
     * @return TransactionFeedDto
     */
    fun getTransactionsForAccountByCategory(
        accountUid: UUID,
        categoryUid: UUID,
        changesSince: LocalDateTime
    ): TransactionFeedDto

    /**
     * Creates a SavingsGoal for the provided account with a given name and target amount to save
     * @param accountUid : UUID of the account
     * @param name : name for the savings goal
     * @param target : target for the savings goal
     */
    fun createSavingsGoal(accountUid: UUID, name: String, target: Long): SavingsGoalDto

    /**
     * Transfers the specified amount to the savings goal
     * @param accountUid : UUID of the account
     * @param savingsGoalUid : UUID of the savings goal
     * @param transferUid : UUID for the transfer needs to be generated by the caller
     * @param amount : amount to transfer
     * @return status of the transfer
     */
    fun transferToSavingsGoal(accountUid: UUID, savingsGoalUid: UUID, transferUid: UUID, amount: Long): TransferSavingsGoalDto

    /**
     * Returns the information and the current progress for a savings goal
     * @param accountUid : UUID of the account
     * @param savingsGoalUid : UUID of the savings goal
     * @return status of the savings goal
     */
    fun getSavingsGoal(accountUid: UUID, savingsGoalUid: UUID) : SavingsGoalInfoDto
}